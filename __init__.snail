global.set snail.init.dir [file.getcwd]
if {dict.has [sys.environ] "SNAILWORK"} then {
	file.setcwd [dict.get [sys.environ] "SNAILWORK"]
}

proc rem {& $ignored} {null}

proc module.cmds {$name} {
	arg.must.symbol name
	if {module.exists.unloaded $name} then {module.load $name}
	set prefix [string.concat [token.quote $name] "."]
	set r {}
	foreach cmd [info.cmds] {
		if {string.starts.with [token.quote $cmd] $prefix} then {
			set r [list.add $r $cmd]
		}
	}
	list.sort $r
}

proc list.find.at {$list $what} {
	set i 0
	set length [list.length $list]
	while {< $i $length} {
		set e [list.at $list $i]
		if {= $e $what} then {return $i}
		set i [+ $i 1]
	}
	return ""
}

proc file.exists {$path} {
	catch {
		file.stat $path
		pass t
	} ignored { pass f }
}

proc file.is.type {$path $type} {
	catch {
		set stat [file.stat $path]
		= [dict.get $stat type] $type
	} ignored {pass f}
}

proc token.is.quoted {$token} {= [token.classify $token] Q}
proc token.is.symbol {$token} {= [token.classify $token] U}
proc token.is.dict {$token} {= [token.classify $token] D}
proc token.is.list {$token} {= [token.classify $token] L}
proc token.is.exec {$token} {= [token.classify $token] X}
proc token.is.newline {$token} {= [token.classify $token] N}
proc token.is.null {$token} {= [token.classify $token] Z}
proc token.is.var {$token} {= [token.classify $token] V}

proc arg.must.quoted {$name} {
	if {not [token.is.quoted [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be quoted string (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.symbol {$name} {
	if {not [token.is.symbol [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be a symbol (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.list {$name} {
	if {not [token.is.list [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be a list (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.dict {$name} {
	if {not [token.is.dict [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be a dict (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.int {$name} {
	if {not [is.int [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be an integer (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.hex {$name} {
	if {not [is.hex [var.get.up 1 $name]]} then {
		error [string.concat "argument $" $name " must be an hex data (in: " [frame.cmd.up 1] ")"]
	}
}

proc arg.must.hex.length {$name $length} {
	arg.must.symbol name
	arg.must.int length
	set value [var.get.up 1 $name]
	if {not [is.hex $value]} then {
		error [string.concat "argument $" $name " must be an hex data (in: " [frame.cmd.up 1] ")"]
	}
	set actual [hex.length $value]
	if {not [= $length $actual]} then {
		error [string.concat "argument $" $name " hex data length expected " $length " actual " $actual " (in: " [frame.cmd.up 1] ")"]
	}
}

proc file.is.blk {$path} {file.is.type $path blk}
proc file.is.chr {$path} {file.is.type $path chr}
proc file.is.dir {$path} {file.is.type $path dir}
proc file.is.fifo {$path} {file.is.type $path fifo}
proc file.is.reg {$path} {file.is.type $path reg}
proc file.is.lnk {$path} {file.is.type $path lnk}
proc file.is.sock {$path} {file.is.type $path sock}

global.set module.load.path [list [string.concat [global.get snail.init.dir] "/autoload"]]
global.set module.loaded %{}
global.set module.path.loaded {}

proc not {$bool} {if {pass $bool} then {pass f} else {pass t}}
proc not.null {$v} {not [is.null $v]}

proc string.contains {$haystack $needle} {not.null [string.find $haystack $needle]}

proc module.name {$name} {
	arg.must.symbol name
	set quoted [token.quote $name]
	if {not [string.contains $quoted "."]} then {
		null
	} else {
		token.unquote [string.left $quoted [string.find.rev $quoted "."]]
	}
}

proc module.find.path {$name} {
	while {not.null $name} {
		foreach path [global.get module.load.path] {
			set fpath [string.concat $path "/" [string.replace [token.quote $name] "." "/"] ".snail"]
			if {file.is.reg $fpath} then {return $fpath}
		}
		set name [module.name $name]
	}
	null
}

proc module.is.loaded {$name} {
	arg.must.symbol name
	nvl [dict.get [global.get module.loaded] $name] f
}

proc module.set.loaded {$name} {
	arg.must.symbol name
	global.set module.loaded [dict.set [global.get module.loaded] $name t]
}

proc module.path.is.loaded {$path} {
	arg.must.quoted path
	set path [string.lower $path]
	list.contains [global.get module.path.loaded] $path
}

proc module.path.set.loaded {$path} {
	arg.must.quoted path
	set path [string.lower $path]
	if {not [module.path.is.loaded $path]} then {
		global.set module.path.loaded [list.sort [list.add [global.get module.path.loaded] $path]]
	}
	null
}

proc module.exists {$name} {
	arg.must.symbol name
	if {module.is.loaded $name} then {return t}
	not.null [module.find.path $name]
}

proc module.exists.unloaded {$name} {
	arg.must.symbol name
	if {module.is.loaded $name} then {return f}
	not.null [module.find.path $name]
}

proc module.load {$name} {
	arg.must.symbol name
	if {module.is.loaded $name} then {return [null]}
	set path [module.find.path $name]
	if {is.null $path} then {
		error [string.concat "no file found for module '" $name "'"]
	}
	catch {
		file.run $path
	} e {
		error [string.concat "error loading file '" $path "' for module '" $name  "': " $e]
	}
	module.path.set.loaded $path
	module.set.loaded $name
	null
}

proc apply {$cmd $args} {
	arg.must.symbol cmd
	arg.must.list args
	eval [list.concat [list $cmd] $args]
}

proc unknown {$cmd $args} {
	if {token.is.symbol $cmd} then {
		set module [module.name $cmd]
		if {not.null $module} then {
			if {module.exists.unloaded $module} then {
				module.load $module
				return [apply $cmd $args]
			}
		}
	}
	error [string.concat "unknown command " [token.quote [token.quote $cmd]]]
}

proc help {} {
	puts "Welcome to Snail interpreter online help"
	puts "For list of valid commands, type: help.cmds"
	puts ""
}

proc module.load.for {$name} {
	arg.must.symbol name
	set module [module.name $name]
	if {not.null $module} then {
		if {module.exists.unloaded $module} then {module.load $module}
	}
}

proc proc.exists {$name} {
	arg.must.symbol name
	module.load.for $name
	not.null [info.about.cmd $name]
}

proc string.is.empty {$string} {
	arg.must.quoted string
	= 0 [string.length $string]
}

proc channel.read.line {$channel} {
	set line ""
	loop {
		set r [channel.read $channel 1]
		if {is.null $r} then {return [if {string.is.empty $line} then {null} else {pass $line}]}
		if {= $r "\n"} then {return $line}
		set line [string.concat $line $r]
	}
}

proc prompt {$prompt} {
	arg.must.quoted prompt
	puts.nonewline $prompt
	channel.flush stdout
	channel.read.line stdin
}

proc prompt.yesno {$prompt} {
	loop {
		set response [prompt [string.concat $prompt " (Y/N)? "]]
		if {is.null $response} then {
			puts ""
			puts "Got EOF - assuming response NO"
			return f
		}
		set response [string.upper [string.trim $response]]
		if {= $response "Y"} then {return t}
		if {= $response "YES"} then {return t}
		if {= $response "N"} then {return f}
		if {= $response "NO"} then {return f}
		puts "Invalid response - please answer YES or NO"
	}
}

proc prompt.int {$prompt} {
	loop {
		set response [prompt $prompt]
		if {is.null $response} then {
			return [null]
		}
		set response [string.trim $response]
		if {is.int [token.unquote $response]} then {
			return [token.unquote $response]
		}
		puts "Invalid response - please enter a NUMBER"
	}
}

proc string.strip.prefix {$str $prefix} {
	if {string.starts.with $str $prefix} then {
		string.skip $str [string.length $prefix]
	} else {
		pass $str
	}
}

proc string.strip.suffix {$str $suffix} {
	if {string.ends.with $str $suffix} then {
		string.sub $str 0 [- [string.length $str] [string.length $suffix]]
	} else {
		pass $str
	}
}

proc string.strip.circumfix {$str $prefix $suffix} {
	string.strip.suffix [string.strip.prefix $str $prefix] $suffix
}

proc token.list.body {$list} {
	arg.must.list list
	string.strip.circumfix [token.quote $list] "{" "}"
}

proc catching {$code} {
	set caught [null]
	catch {eval.up 1 $code} e {set caught $e}
	pass $caught
}

proc string.lpad {$string $char $len} {
	arg.must.quoted string
	arg.must.quoted char
	arg.must.int len
	set r $string
	while {< [string.length $r] $len} {
		set r [string.concat $char $r]
	}
	pass $r
}

proc string.rpad {$string $char $len} {
	arg.must.quoted string
	arg.must.quoted char
	arg.must.int len
	set r $string
	while {< [string.length $r] $len} {
		set r [string.concat $r $char]
	}
	pass $r
}

proc uuid.generate {} {
	loop {
		set y [string.skip [rand.hex 1] 1]
		if {or {= $y "8"} {= $y "9"} {= $y "A"} {= $y "B"}} then {break}
	}
	string.concat [rand.hex 8] "-" [rand.hex 4] "-4" [rand.hex 3] "-" $y [rand.hex 3] "-" [rand.hex 12]
}

proc list.contains {$list $elem} {not.null [list.find $list $elem]}

proc math.bits.u32 {$n} {- 32 [math.clz.u32 $n]}

proc repeat {$times $code} {
	set i 0
	while {< $i $times} {
		eval.up 1 $code
		set i [+ 1 $i]
	}
}

proc list.repeat {$times $code} {
	set r {}
	repeat $times {set r [list.add $r [eval.up 1 $code]]}
	pass $r
}

proc histogram {$list} {
	set r %{}
	foreach e $list {
		set r [dict.set $r $e [+ 1 [nvl [dict.get $r $e] 0]]]
	}
	pass $r
}

proc dict.as.sorted.list {$dict} {
	set r {}
	foreach key [list.sort [dict.keys $dict]] {
		set r [list.concat $r [list $key [dict.get $dict $key]]]
	}
	pass $r
}

proc dict.values {$dict} {
	set r {}
	foreach key [list.sort [dict.keys $dict]] {
		set r [list.add $r [dict.get $dict $key]]
	}
	pass $r
}

proc math.abs {$n} {
	if {< $n 0} then {- $n} else {pass $n}
}

proc list.generate {$n} {
	arg.must.int n
	if {< $n 0} then {error "argument cannot be negative"}
	set r {}
	set i 0
	while {< $i $n} {
		set r [list.add $r $i]
		set i [+ 1 $i]
	}
	pass $r
}

proc string.split {$string $delim} {
	if {string.is.empty $string} then {return {}}
	if {not [string.contains $string $delim]} then {return [list $string]}
	set i 0
	set last 0
	set r {}
	loop {
		set idx [string.find.at $string $delim $i]
		if {is.null $idx} then {
			set elem [string.sub $string $last [string.length $string]]
			set r [list.add $r $elem]
			return $r
		}
		set elem [string.sub $string $last [- $idx $i]]
		set r [list.add $r $elem]
		set last [+ $idx [string.length $delim]]
		set i [+ $idx [string.length $delim]]
	}
}

proc string.join {$list $delim} {
	set r ""
	foreach e $list {
		set r [string.concat $r [if {string.is.empty $r} then {pass ""} else {pass $delim}] $e]
	}
	pass $r
}

proc dict.invert {$dict} {
	arg.must.dict dict
	set values %{}
	foreach key [dict.keys $dict] {
		set value [dict.get $dict $key]
		set values [dict.set $values $value [list.add [nvl [dict.get $values $value] {}] $key]]
	}
	pass $values
}

proc dict.find.duplicate.values {$dict} {
	arg.must.dict dict
	set values [dict.invert $dict]
	set r %{}
	foreach value [dict.keys $values] {
		set keys [dict.get $values $value]
		set nkeys [list.length $keys]
		if {<= $nkeys 1} then {continue}
		set r [dict.set $r $value $keys]
	}
	pass $r
}

proc list.quoted.only {$list} {
	arg.must.list list
	set r {}
	foreach e $list {
		if {token.is.quoted $e} then {set r [list.add $r $e]}
	}
	pass $r
}

proc platform.is.dos {} {= [platform.type] djgpp}
proc platform.is.linux {} {= [platform.type] linux}
proc platform.is.macos {} {= [platform.type] macos}
proc platform.path.sep {} {
	if {platform.is.dos} then {pass ";"} else {pass ":"}
}

proc hex {$hex} {
	if {token.is.quoted $hex} then {from.radix.i32 $hex 16} else {from.radix.i32 [token.quote $hex] 16}
}

proc hex.length {$hex} {
	arg.must.hex hex
	/ [string.length $hex] 2
}

proc hex.sub {$hex $off $len} {string.sub $hex [* 2 $off] [* 2 $len]}

proc hex.byte {$byte} {
	arg.must.int byte
	if {or {< $byte 0} {> $byte 255}} then {error [string.concat "invalid byte: " $byte]}
	string.lpad [to.hex $byte] "0" 2
}

proc proc.comment {$proc $comment} {
	set existing [proc.meta.get $proc proc.comment]
	if {not.null $existing} then {
		set comment [string.concat $existing "\n" $comment]
	}
	proc.meta.set $proc proc.comment $comment
}

proc cls {} {
	if {platform.is.dos} then {dos.cls.home} else {puts.nonewline [string.concat [string.chr 27] "[2J" [string.chr 27] "[H"]}
}

proc cleanup {$body $cleanup} {
	set caught [null]
	set r [null]
	catch {
		set r [eval.up 1 $body]
	} e {set caught $e}
	eval.up 1 $cleanup
	if {not.null $caught} then {error $caught}
	pass $r
}

proc file.savecwd {$code} {
	set saved [file.getcwd]
	cleanup {eval.up 1 $code} {file.setcwd $saved}
}

proc div.round.up {$n $mod} {
	set v [/ $n $mod]
	if {not [= 0 [% $n $mod]]} then {set v [+ 1 $v]}
	pass $v
}

proc align {$n $mod} {* [div.round.up $n $mod] $mod}

proc hex.u16be {$u16} {
	arg.must.int u16
	if {or {< $u16 0} {> $u16 65535}} then {error [string.concat "Bad U16 HEX: " $u16]}
	string.lpad [to.hex $u16] "0" 4
}

proc hex.u16le {$u16} {hex.reverse [hex.u16be $u16]}

proc hex.u32be {$u32} {
	arg.must.int u32
	if {< $u32 0} then {error [string.concat "Bad U32 HEX: " $u32]}
	set r [string.lpad [to.hex $u32] "0" 8]
	if {> [hex.length $r] 8} then {error [string.concat "Bad U32 HEX: " $u32]}
	pass $r
}

proc hex.u32le {$u32} {hex.reverse [hex.u32be $u32]}

proc sys.path.get {} {
	string.split [nvl [dict.get [sys.environ] "PATH"] ""] [platform.path.sep]
}

proc sys.path.set {$path} {
	arg.must.list path
	sys.setenv "PATH" [string.join $path [platform.path.sep]]
}

proc sys.path.saving {$code} {
	arg.must.list code
	set saved [sys.path.get]
	cleanup {eval.up 1 $code} {sys.path.set $saved}
}

proc sys.path.prepend {$elem} {
	arg.must.quoted elem
	sys.path.set [list.concat [list $elem] [sys.path.get]]
}

proc sys.path.append {$elem} {
	sys.path.set [list.concat [sys.path.get] [list $elem]]
}

if {platform.is.dos} then {dos.snail.init}
if {file.exists "__auto__.snail"} then {file.run "__auto__.snail"}
