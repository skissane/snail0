proc dos.make83 {$name} {
	arg.must.quoted name
	if {string.contains $name "/"} then {return [dos.make83.path $name]}
	set parts [string.split $name "."]
	set nparts [list.length $parts]
	if {or {< $nparts 1} {> $nparts 2}} then {error [string.concat "Name cannot be converted to DOS 8.3 format: " [token.quote $name]]}
	set r [string.upper [string.left [list.at $parts 0] 8]]
	if {= $nparts 2} then {set r [string.concat $r "." [string.upper [string.left [list.at $parts 1] 3]]]}
	pass $r
}

proc dos.make83.path {$path} {
	arg.must.quoted path
	set names [string.split $path "/"]
	set result {}
	foreach name $names {set result [list.add $result [dos.make83 $name]]}
	string.join $result "/"
}

proc dos.make83.paths {$paths} {
	arg.must.list paths
	set map %{}
	foreach path $paths {set map [dict.set $map $path [dos.make83 $path]]}
	set dups [dict.find.duplicate.values $map]
	if {> [dict.size $dups] 0} then {
		error [string.concat "DOS 8.3 paths are not unique: " $dups]
	}
	pass $map
}

proc dos.version {} {
	set r [dos.int86 [hex 21] [dict ah [hex 30]]]
	set major [dict.get $r al]
	set minor [dict.get $r ah]
	string.concat $major "." $minor
}

proc dos.key.installed {} {
	set r [dos.int86 [hex 2f] [dict ax [hex 4800]]]
	not [= 0 [dict.get $r al]]
}

proc dos.key.read {} {
	set mem.buf [dos.mem.alloc 130]
	set mem.seg [channel.control $mem.buf {segment}]
	channel.control $mem.buf [list byte.set 0 [hex 80]]
	set result [dos.int86 [hex 2f] [dict ax [hex 4810] ds $mem.seg]]
	if {not [= [dict.get $result ax] 0]} then {
		channel.close $mem.buf
		error "dos.key.read: DOSKEY call (INT 0x2F,AX=0x4810) failed"
	}
	set bytes [channel.control $mem.buf {byte.get 1}]
	if {= 0 $bytes} then {
		channel.close $mem.buf
		puts ""
		return ""
	}
	channel.control $mem.buf [list byte.set 0 [hex 20]]
	channel.control $mem.buf [list byte.set 1 [hex 20]]
	channel.control $mem.buf [list byte.set [+ $bytes 2] 0]
	set read [channel.read $mem.buf 144]
	channel.close $mem.buf
	puts ""
	set r [string.skip $read 2]
	if {= $r [string.chr 26]} then {return [null]}
	pass $r
}

proc dos.vesa.info.raw {} {
	set mem.buf [dos.mem.alloc 272]
	set mem.seg [channel.control $mem.buf {segment}]
	set r [dos.int86 [hex 10] [dict ax [hex 4f00] es $mem.seg]]
	if {not [= [dict.get $r ax] [hex 4f]]} then {
		channel.close $mem.buf
		return [null]
	}
	set r [channel.read.hex $mem.buf 256]
	channel.close $mem.buf
	if {not [= [hex.sub $r 0 4] [hex.encode "VESA"]]} then {return [null]}
	return $r
}

proc dos.vesa.info {} {
	set r [dos.vesa.info.raw]
	if {is.null $r} then {return [null]}
	set h %{}
	set minor [from.radix.i32 [hex.sub $r 4 1] 16]
	set major [from.radix.i32 [hex.sub $r 5 1] 16]
	set version [string.concat $major "." $minor]
	set h [dict.set $h version $version]
	set oem.fp [hex.reverse [hex.sub $r 6 4]]
	set oem.fpseg [from.radix.i32 [hex.sub $oem.fp 0 2] 16]
	set oem.fpoff [from.radix.i32 [hex.sub $oem.fp 2 2] 16]
	set oem.string [dos.mem.peek.asciiz $oem.fpseg $oem.fpoff]
	set h [dict.set $h oem.string $oem.string]
	set abilities [hex.reverse [hex.sub $r 10 4]]
	set h [dict.set $h abilities $abilities]
	set modes.fp [hex.reverse [hex.sub $r 14 4]]
	set modes.fpseg [from.radix.i32 [hex.sub $modes.fp 0 2] 16]
	set modes.fpoff [from.radix.i32 [hex.sub $modes.fp 2 2] 16]
	set h [dict.set $h modes [dos.vesa.modelist $modes.fpseg $modes.fpoff]]
	pass $h
}

proc dos.vesa.mode.get {} {
	set r [dos.int86 [hex 10] [dict ax [hex 4f03]]]
	if {not [= [dict.get $r ax] [hex 4f]]} then {return [null]}
	dict.get $r bx
}

proc dos.vesa.modelist {$seg $off} {
	set r {}
	loop {
		set mode [dos.mem.peek16 $seg $off]
		if {= $mode "FFFF"} then {return $r}
		set r [list.add $r $mode]
		set off [+ 2 $off]
	}
}

proc dos.snail.init {} {
	if {dos.key.installed} then {
		repl.read.script.set {dos.key.read}
	}
}

proc dos.bda.get.byte {$off} {
	dos.mem.peek [hex 40] $off
}

proc dos.bda.screen.columns {} {dos.bda.get.byte [hex 4A]}
proc dos.bda.screen.rows {} {dos.bda.get.byte [hex 84]}

proc dos.vmode.get {} {
	set r [dos.int86 [hex 10] [dict ah [hex 0f]]]
	dict videoMode [dict.get $r al] columnsPerLine [dict.get $r ah] activePage [dict.get $r bh]
}

proc dos.vmode.set {$mode} {
	arg.must.int mode
	dos.int86 [hex 10] [dict ah 0 al $mode]
	set curMode [dict.get [dos.vmode.get] videoMode]
	if {not [= $mode $curMode]} then {
		error [string.concat "set video mode " $mode " failed; still in mode " $curMode]
	}
	null
}

proc dos.vmode.enter {$mode} {
	arg.must.int mode
	set curMode [dict.get [dos.vmode.get] videoMode]
	if {= $mode $curMode} then {return [null]}
	dos.vmode.set $mode
}

proc dos.vmode.save {$code} {
	set mode [dict.get [dos.vmode.get] videoMode]
	cleanup {eval.up 1 $code} {dos.vmode.enter $mode}
}

proc dos.vmode.all {} {dos.vmode.save {
	set r {}
	set i 0
	while {< $i 128} {
		catch {
			dos.vmode.set $i
			set r [list.add $r $i]
		} e {null}
		set i [+ 1 $i]
	}
	pass $r
}}

proc dos.vpage.set {$page} {
	arg.must.int page
	dos.int86 [hex 10] [dict ah 5 al $page]
	set curPage [dict.get [dos.vmode.get] activePage]
	if {not [= $page $curPage]} then {
		error [string.concat "set video page " $page " failed; still in page " $curPage]
	}
	null
}

proc dos.vpage.enter {$page} {
	arg.must.int page
	set curPage [dict.get [dos.vmode.get] activePage]
	if {= $page $curPage} then {return [null]}
	dos.vpage.set $page
}

proc dos.vpage.get {} {dict.get [dos.vmode.get] activePage}

proc dos.vpage.cursor.get {$page} {
	arg.must.int page
	set regs [dos.int86 [hex 10] [dict ah 3 bh $page]]
	dict page $page startScanLine [dict.get $regs ch] endScanLine [dict.get $regs cl] row [dict.get $regs dh] column [dict.get $regs dl]
}

proc dos.cursor.get {} {dos.vpage.cursor.get [dos.vpage.get]}
proc dos.vpage.cursor.set {$page $row $col} {
	arg.must.int page
	arg.must.int row
	arg.must.int col
	dos.int86 [hex 10] [dict bh $page dh $row dl $col ah 2]
	null
}
proc dos.cursor.set {$row $col} {dos.vpage.cursor.set [dos.vpage.get] $row $col}
proc dos.cursor.home {} {dos.cursor.set 0 0}

proc dos.cls {} {
	set regs %{}
	set regs [dict.set $regs dh [dos.bda.screen.rows]]
	set regs [dict.set $regs dl [dos.bda.screen.columns]]
	set regs [dict.set $regs cx 0]
	set regs [dict.set $regs bh 7]
	set regs [dict.set $regs al 0]
	set regs [dict.set $regs ah 6]
	dos.int86 [hex 10] $regs
	null
}
proc dos.cls.home {} {
	dos.cls
	dos.cursor.home
}
proc dos.pause.key {} {
	dos.int86 [hex 21] [dict ax [hex 0c07]]
	dos.int86 [hex 21] [dict ax [hex 0c00]]
	null
}
proc dos.pause {} {
	puts.nonewline "Press any key to continue..."
	dos.pause.key
	puts ""
}

proc dos.mem.peek16 {$seg $off} {
	arg.must.int seg
	arg.must.int off
	set r ""
	set r [string.concat $r [hex.byte [dos.mem.peek $seg $off]]]
	set r [string.concat $r [hex.byte [dos.mem.peek $seg [+ 1 $off]]]]
	set r [hex.reverse $r]
	pass $r
}

proc dos.mem.peek.asciiz {$seg $off} {
	arg.must.int seg
	arg.must.int off
	set r ""
	loop {
		set b [dos.mem.peek $seg $off]
		if {= $b 0} then {break}
		set r [string.concat $r [hex.byte $b]]
		set off [+ 1 $off]
	}
	hex.decode $r
}

proc dos.vesa.modeinfo.raw {$mode} {
	arg.must.int mode
	if {or {< $mode 0} {> $mode [hex FFFF]}} then {error "$mode argument out of valid range"}
	set mem.buf [dos.mem.alloc 272]
	set mem.seg [channel.control $mem.buf {segment}]
	set r [dos.int86 [hex 10] [dict ax [hex 4f01] es $mem.seg cx $mode]]
	if {not [= [dict.get $r ax] [hex 4f]]} then {
		channel.close $mem.buf
		return [null]
	}
	set r [channel.read.hex $mem.buf 256]
	channel.close $mem.buf
	return $r
}

proc dos.apm.version {} {
	set r [dos.int86 [hex 15] [dict ax [hex 5300]]]
	set flags [dict.get $r flags]
	rem "If carry flag set, APM not installed"
	if {= [math.and.u32 $flags 1] 1} then {return [null]}
	rem "If BX <> 0x504d, APM not installed"
	if {not [= [dict.get $r bx] [hex 504D]]} then {return [null]}
	string.concat [bcd.decode [dict.get $r ah]] "." [bcd.decode [dict.get $r al]]
}

proc dos.apm.connect {} {
	if {is.null [dos.apm.version]} then {error "APM is not installed"}
	set r [dos.int86 [hex 15] [dict ax [hex 5301]]]
	set flags [dict.get $r flags]
	if {= [math.and.u32 $flags 1] 1} then {error "APM interface connection failed"}
	null
}

proc dos.apm.poweroff {} {
	dos.apm.connect
	disk.sync
	dos.int86 [hex 15] [dict ax [hex 5307] cx 3]
	error "APM power off failure"
}

proc dos.vga.palette.get {$count} {
	arg.must.int count
	if {< $count 1} then {error "dos.vga.palette.get: $count must be greater than zero"}
	if {> $count 256} then {error "dos.vga.paletter.get: $count maximum is 256"}
	set mem.buf [dos.mem.alloc [* 3 $count]]
	cleanup {
		set segment [channel.control $mem.buf {segment}]
		dos.int86 [hex 10] [dict ax [hex 1017] cx $count es $segment]
		set data [channel.read.hex $mem.buf [* 3 $count]]
	} {channel.close $mem.buf}
	pass $data
}

proc dos.vga.palette.set {$data} {
	arg.must.hex data
	set length [string.length $data]
	if {= 0 $length} then {error "dos.vga.palette.set: no palette data"}
	if {not [= 0 [% $length 6]]} then {error "dos.vga.palette.set: palette data must be multiple of 3 bytes"}
	set count [/ $length 6]
	set mem.buf [dos.mem.alloc [/ $length 6]]
	cleanup {
		channel.write.hex $mem.buf $data
		set segment [channel.control $mem.buf {segment}]
		dos.int86 [hex 10] [dict ax [hex 1012] cx $count es $segment]
	} {channel.close $mem.buf}
	null
}

proc dos.vga.palette.save {$code} {
	set saved [dos.vga.palette.get 256]
	cleanup {eval.up 1 $code} {dos.vga.palette.set $saved}
}

proc dos.show.bmp {$file} { dos.vmode.save { dos.vga.palette.save {
	arg.must.quoted file
	set chan [file.open $file "rb"]
	set hdr [bmp.read $chan]
	dos.vmode.enter [hex 13]
	dos.vga.palette.set [dos.palette.to.vga [dict.get $hdr palette]]
	dos.cls
	set mem [dos.mem.fixed 64000 [hex A000]]
	channel.write.hex $mem [hex.zeroes 64000]
	set data [channel.read.hex $chan [dict.get $hdr image.bytes]]
	channel.write.hex $mem $data
	dos.pause.key
	channel.close $mem
	channel.close $chan
}}}

proc dos.palette.to.vga1 {$x} {
	arg.must.hex.length x 1
	string.lpad [to.hex [/ [* [hex $x] 63 ] 255]] "0" 2
}

proc dos.palette.from.vga1 {$x} {
	arg.must.hex.length x 1
	string.lpad [to.hex [/ [* [hex $x] 255] 63]] "0" 2
}

proc dos.palette.to.vga3 {$x} {
	arg.must.hex.length x 3
	set red [hex.sub $x 0 1]
	set green [hex.sub $x 1 1]
	set blue [hex.sub $x 2 1]
	set red [dos.palette.to.vga1 $red]
	set green [dos.palette.to.vga1 $green]
	set blue [dos.palette.to.vga1 $blue]
	string.concat $red $green $blue
}

proc dos.palette.from.vga3 {$x} {
	arg.must.hex.length x 3
	set red [hex.sub $x 0 1]
	set green [hex.sub $x 1 1]
	set blue [hex.sub $x 2 1]
	set red [dos.palette.from.vga1 $red]
	set green [dos.palette.from.vga1 $green]
	set blue [dos.palette.from.vga1 $blue]
	string.concat $red $green $blue
}

proc dos.palette.to.vga {$palette} {
	arg.must.hex palette
	if {not [= 1536 [string.length $palette]]} then {error "Bad $palette argument length"}
	set i 0
	set r ""
	while {< $i 256} {
		set n [* $i 3]
		set rgb [hex.sub $palette $n 3]
		set vga [dos.palette.to.vga3 $rgb]
		set r [string.concat $r $vga]
		set i [+ 1 $i]
	}
	pass $r
}

proc dos.palette.mode {} {
	set r [dos.int86 [hex 10] [dict ax [hex 101a]]]
	dict pagingMode [dict.get $r bl] currentPage [dict.get $r bh]
}

proc dos.pel.mask {} {
	dict.get [dos.int86 [hex 10] [dict ax [hex 1019]]] bl
}

proc dos.palette.from.vga {$palette} {
	arg.must.hex palette
	if {not [= 1536 [string.length $palette]]} then {error "Bad $palette argument length"}
	set i 0
	set r ""
	while {< $i 256} {
		set n [* $i 3]
		set rgb [hex.sub $palette $n 3]
		set vga [dos.palette.from.vga3 $rgb]
		set r [string.concat $r $vga]
		set i [+ 1 $i]
	}
	pass $r
}

proc dos.bmp.make.vga {$from $to} {
	arg.must.quoted from
	arg.must.quoted to
	set inp [file.open $from "rb"]
	set hdr [bmp.read $inp]
	channel.close $inp
	set palette [dict.get $hdr palette]
	set palette [dos.palette.to.vga $palette]
	set palette [dos.palette.from.vga $palette]
	set inp [file.open $from "rb"]
	set hex [channel.read.hex $inp 26]
	channel.read.hex $inp [hex.length $palette]
	set data [channel.read.hex $inp [dict.get $hdr image.bytes]]
	channel.close $inp
	set hex [string.concat $hex $palette $data]
	set out [file.open $to "wb"]
	channel.write.hex $out $hex
	channel.close $out
}

proc dos.disk.read {$drive $count $start} {
	rem "Assume 512 byte sectors"
	set mem.buf [dos.mem.alloc [* $count 512]]
	set mem.seg [channel.control $mem.buf {segment}]
	rem "Note this is using the old DOS<4.0 API with max 32M disk size"
	rem "Since I am just playing with floppies that is fine"
	set r [dos.int86 [hex 25] [dict al $drive cx $count dx $start ds $mem.seg]]
	set flags [dict.get $r flags]
	rem "If carry flag set, error occurred"
	if {= [math.and.u32 $flags 1] 1} then {
		channel.close $mem.buf
		error [string.concat "INT 25h failed with AX=" [string.lpad [to.hex [dict.get $r ax]] "0" 4]]
	}
	set hex [channel.read.hex $mem.buf [* $count 512]]
	channel.close $mem.buf
	pass $hex
}

proc dos.cdrom.count {} {
	rem "Uses MSCDEX INT 2F,AX=1500 - CD-ROM - INSTALLATION CHECK"
	rem "Output: BX = number of CD-ROM drives installed"
	set r [dos.int86 [hex 2f] [dict ax [hex 1500]]]
	dict.get $r bx
}

proc dos.cdrom.mscdex.version {} {
	rem "Uses MSCDEX INT 2F,AX=150C - CD-ROM v2.00+ - GET MSCDEX.EXE VERSION (GET VERSION)"
	rem "Output BH = major version, BL = minor version"
	rem "Not supported for MSCDEX 1.x, will return 0.0"
	set r [dos.int86 [hex 2f] [dict ax [hex 150C]]]
	string.concat [dict.get $r bh] "." [dict.get $r bl]
}

proc dos.cdrom.drives {} {
	rem "Uses MSCDEX INT 2F,AX=150D - CD-ROM v2.00+ - GET CD-ROM DRIVE LETTERS"
	set mem.buf [dos.mem.alloc 256]
	set mem.seg [channel.control $mem.buf {segment}]
	set r [dos.int86 [hex 2f] [dict ax [hex 150d] es $mem.seg]]
	set s {}
	set i 0
	set count [dos.cdrom.count]
	while {< $i $count} {
		set s [list.add $s [string.chr [+ [string.char.at "A" 0] [channel.control $mem.buf [list byte.get $i]]]]]
		set i [+ 1 $i]
	}
	channel.close $mem.buf
	pass $s
}

proc dos.cdrom.mscdex.installed {} {
	set r [dos.int86 [hex 2f] [dict ax [hex 150b]]]
	set bx [dict.get $r bx]
	= [hex ADAD] $bx
}

proc dos.drive.to.index {$drive} {
	if {not [= 1 [string.length $drive]]} then {error [string.concat "Invalid drive specification '" $drive ":'"]}
	set drive [string.upper $drive]
	set index [string.char.at $drive 0]
	if {< $index [string.char.at "A" 0]} then {error [string.concat "Invalid drive specification '" $drive ":'"]}
	if {> $index [string.char.at "Z" 0]} then {error [string.concat "Invalid drive specification '" $drive ":'"]}
	- $index [string.char.at "A" 0]
}

proc dos.cdrom.is {$drive} {
	set index [dos.drive.to.index $drive]
	set r [dos.int86 [hex 2f] [dict ax [hex 150b] cx $index]]
	set ax [dict.get $r ax]
	not [= $ax 0]
}

proc dos.reqhdr.prefixlen {$hex} {
	string.concat [hex.byte [hex.length $hex]] $hex
}

proc dos.reqhdr.make {$subunit $cmd $body} {
	dos.reqhdr.prefixlen [string.concat [hex.byte $subunit] [hex.byte $cmd] [hex.u16le 0] [hex.zeroes 8] $body]
}

proc dos.reqhdr.ioctlo {$subunit $dtaseg $dtaoff $dtacount} {
	set body [string.concat [hex.byte 0] [hex.u16le $dtaoff] [hex.u16le $dtaseg] [hex.u16le $dtacount] [hex.zeroes 10]]
	rem "12=IOCTLO (IOCTL OUTPUT) COMMAND"
	dos.reqhdr.make $subunit 12 $body
}

proc dos.cdrom.ioctlo {$drive $body} {
	set drive [dos.drive.to.index $drive]
	set dta.count [hex.length $body]
	set dta.buf [dos.mem.alloc $dta.count]
	set dta.seg [channel.control $dta.buf {segment}]
	channel.write.hex $dta.buf $body
	set req.hex [dos.reqhdr.ioctlo 0 $dta.seg 0 $dta.count]
	set req.len [hex.length $req.hex]
	set req.buf [dos.mem.alloc $req.len]
	set req.seg [channel.control $req.buf {segment}]
	set r [dos.int86 [hex 2f] [dict ax [hex 1510] cx $drive es $req.seg]]
	rem "TODO: Process output, detect error, etc."
	channel.close $req.buf
	channel.close $dta.buf
	null
}

proc dos.cdrom.eject {$drive} {
	if {not [dos.cdrom.is $drive]} then {error [string.concat "Drive " $drive " is not a CD-ROM, cannot eject"]}
	dos.cdrom.ioctlo $drive "0100"
	dos.cdrom.ioctlo $drive "00"

	rem "FIXME: This function is broken, it doesn't work."
	rem "I think the basic logic is right, I've just made an error somewhere"
}
