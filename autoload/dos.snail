proc dos.make83 {$name} {
	arg.must.quoted name
	if {string.contains $name "/"} then {return [dos.make83.path $name]}
	set parts [string.split $name "."]
	set nparts [list.length $parts]
	if {or {< $nparts 1} {> $nparts 2}} then {error [string.concat "Name cannot be converted to DOS 8.3 format: " [token.quote $name]]}
	set r [string.upper [string.left [list.at $parts 0] 8]]
	if {= $nparts 2} then {set r [string.concat $r "." [string.upper [string.left [list.at $parts 1] 3]]]}
	pass $r
}

proc dos.make83.path {$path} {
	arg.must.quoted path
	set names [string.split $path "/"]
	set result {}
	foreach name $names {set result [list.add $result [dos.make83 $name]]}
	string.join $result "/"
}

proc dos.make83.paths {$paths} {
	arg.must.list paths
	set map %{}
	foreach path $paths {set map [dict.set $map $path [dos.make83 $path]]}
	set dups [dict.find.duplicate.values $map]
	if {> [dict.size $dups] 0} then {
		error [string.concat "DOS 8.3 paths are not unique: " $dups]
	}
	pass $map
}

proc dos.version {} {
	set r [dos.int86 [hex 21] [dict ah [hex 30]]]
	set major [dict.get $r al]
	set minor [dict.get $r ah]
	string.concat $major "." $minor
}

proc dos.key.installed {} {
	set r [dos.int86 [hex 2f] [dict ax [hex 4800]]]
	not [= 0 [dict.get $r al]]
}

proc dos.key.read {} {
	set mem.buf [dos.mem.alloc 130]
	set mem.seg [channel.control $mem.buf {segment}]
	channel.control $mem.buf [list byte.set 0 [hex 80]]
	set result [dos.int86 [hex 2f] [dict ax [hex 4810] ds $mem.seg]]
	if {not [= [dict.get $result ax] 0]} then {
		channel.close $mem.buf
		error "dos.key.read: DOSKEY call (INT 0x2F,AX=0x4810) failed"
	}
	set bytes [channel.control $mem.buf {byte.get 1}]
	if {= 0 $bytes} then {
		channel.close $mem.buf
		puts ""
		return ""
	}
	channel.control $mem.buf [list byte.set 0 [hex 20]]
	channel.control $mem.buf [list byte.set 1 [hex 20]]
	channel.control $mem.buf [list byte.set [+ $bytes 2] 0]
	set read [channel.read $mem.buf 144]
	channel.close $mem.buf
	puts ""
	set r [string.skip $read 2]
	if {= $r [string.chr 26]} then {return [null]}
	pass $r
}

proc dos.snail.init {} {
	if {dos.key.installed} then {
		repl.read.script.set {dos.key.read}
	}
}

proc dos.bda.get.byte {$off} {
	dos.mem.peek [hex 40] $off
}

proc dos.bda.screen.columns {} {dos.bda.get.byte [hex 4A]}
proc dos.bda.screen.rows {} {dos.bda.get.byte [hex 84]}

proc dos.vmode.get {} {
	set r [dos.int86 [hex 10] [dict ah [hex 0f]]]
	dict videoMode [dict.get $r al] columnsPerLine [dict.get $r ah] activePage [dict.get $r bh]
}

proc dos.vmode.set {$mode} {
	arg.must.int mode
	dos.int86 [hex 10] [dict ah 0 al $mode]
	set curMode [dict.get [dos.vmode.get] videoMode]
	if {not [= $mode $curMode]} then {
		error [string.concat "set video mode " $mode " failed; still in mode " $curMode]
	}
	null
}

proc dos.vmode.enter {$mode} {
	arg.must.int mode
	set curMode [dict.get [dos.vmode.get] videoMode]
	if {= $mode $curMode} then {return [null]}
	dos.vmode.set $mode
}

proc dos.vmode.save {$code} {
	set mode [dict.get [dos.vmode.get] videoMode]
	cleanup {eval.up 1 $code} {dos.vmode.enter $mode}
}

proc dos.vmode.all {} {dos.vmode.save {
	set r {}
	set i 0
	while {< $i 128} {
		catch {
			dos.vmode.set $i
			set r [list.add $r $i]
		} e {null}
		set i [+ 1 $i]
	}
	pass $r
}}

proc dos.vpage.set {$page} {
	arg.must.int page
	dos.int86 [hex 10] [dict ah 5 al $page]
	set curPage [dict.get [dos.vmode.get] activePage]
	if {not [= $page $curPage]} then {
		error [string.concat "set video page " $page " failed; still in page " $curPage]
	}
	null
}

proc dos.vpage.enter {$page} {
	arg.must.int page
	set curPage [dict.get [dos.vmode.get] activePage]
	if {= $page $curPage} then {return [null]}
	dos.vpage.set $page
}

proc dos.vpage.get {} {dict.get [dos.vmode.get] activePage}

proc dos.vpage.cursor.get {$page} {
	arg.must.int page
	set regs [dos.int86 [hex 10] [dict ah 3 bh $page]]
	dict page $page startScanLine [dict.get $regs ch] endScanLine [dict.get $regs cl] row [dict.get $regs dh] column [dict.get $regs dl]
}

proc dos.cursor.get {} {dos.vpage.cursor.get [dos.vpage.get]}
proc dos.vpage.cursor.set {$page $row $col} {
	arg.must.int page
	arg.must.int row
	arg.must.int col
	dos.int86 [hex 10] [dict bh $page dh $row dl $col ah 2]
	null
}
proc dos.cursor.set {$row $col} {dos.vpage.cursor.set [dos.vpage.get] $row $col}
proc dos.cursor.home {} {dos.cursor.set 0 0}

proc dos.cls {} {
	set regs %{}
	set regs [dict.set $regs dh [dos.bda.screen.rows]]
	set regs [dict.set $regs dl [dos.bda.screen.columns]]
	set regs [dict.set $regs cx 0]
	set regs [dict.set $regs bh 7]
	set regs [dict.set $regs al 0]
	set regs [dict.set $regs ah 6]
	dos.int86 [hex 10] $regs
	null
}
proc dos.cls.home {} {
	dos.cls
	dos.cursor.home
}
proc dos.pause.key {} {
	dos.int86 [hex 21] [dict ax [hex 0c07]]
	dos.int86 [hex 21] [dict ax [hex 0c00]]
	null
}
proc dos.pause {} {
	puts.nonewline "Press any key to continue..."
	dos.pause.key
	puts ""
}
