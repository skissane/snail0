proc test.case {$name $body} {proc $name {} $body}

proc test.run.case {$name} {
	set start [time.now]
	set caught [null]
	catch {eval [list $name]} e {set caught $e}
	set duration [- [time.now] $start]
	set r [list [if {is.null $caught} then {pass PASS} else {pass FAIL}] $name $duration [nvl $caught ""]]
	puts [string.concat "|" [token.list.body $r]]
	pass $r
}

proc test.summary {$results} {
	set h %{}
	foreach r $results {
		set status [list.at $r 0]
		set h [dict.set $h $status [+ 1 [nvl [dict.get $h $status] 0]]]
	}
	set total 0
	foreach status [dict.keys $h] {
		set total [+ $total [dict.get $h $status]]
	}
	set h [dict.set $h TOTAL $total]
	set summary "Summary:"
	foreach status [list.sort [dict.keys $h]] {
		set summary [string.concat $summary " " $status "=" [dict.get $h $status]]
	}
	puts $summary
	pass $h
}

proc test.run.cases {$cases} {
	set r {}
	foreach name $cases {
		set r [list.add $r [test.run.case $name]]
	}
	pass $r
}

proc test.run.suite {$module} {
	set r [test.run.cases [module.cmds $module]]
	set s [test.summary $r]
	if {dict.has $s FAIL} then {
		error [string.concat "Tests failed in suite " $module]
	}
}

proc test.assert {$test} {
	arg.must.list test
	if {not [eval.up 1 $test]} then {
		error [string.concat "Expected to be true, but was false: " $test]
	}
	null
}

proc test.assert.not {$test} {
	arg.must.list test
	if {eval.up 1 $test} then {
		error [string.concat "Expected to be false, but was true: " $test]
	}
	null
}

proc test.assert.eq {$expect $test} {
	arg.must.list test
	set v [eval.up 1 $test]
	if {not [= $expect $v]} then {
		error [string.concat "Expected {" $expect "} got {" $v "} running " $test]
	}
	null
}

proc test.assert.null {$test} {
	arg.must.list test
	set v [eval.up 1 $test]
	if {not.null $v} then {
		error [string.concat "Expected null, got {" $v "} running " $test]
	}
	null
}

proc test.assert.error {$test} {
	arg.must.list test
	set caught [null]
	catch {eval.up 1 $test} e {set caught $e}
	if {is.null $caught} then {
		error [string.concat "Expected an error in " $test]
	}
}

proc test.make.name {$suite} {
	arg.must.symbol suite
	set index 1000
	loop {
		set name [token.unquote [string.concat $suite ".t" $index]]
		if {not [proc.exists $name]} then {return $name}
		set index [+ 1 $index]
	}
}

proc test.make {$suite $code} {
	arg.must.symbol suite
	arg.must.list code
	set name [test.make.name $suite]
	set caught [null]
	set result [null]
	catch {set result [eval $code]} e {set caught $e}
	if {is.null $caught} then {
		if {= $result t} then {
			set body [list test.assert $code]
		} elseif {= $result f} then {
			set body [list test.assert.not $code]
		} elseif {is.null $result} then {
			set body [list test.assert.null $code]
		} else {
			set body [list test.assert.eq $result $code]
		}
	} else {
		set body [list test.assert.error $code]
	}
	list test.case $name $body
}

proc test.generator {$suite} {
	arg.must.symbol suite
	set path [module.find.path $suite]
	if {is.null $path} then {
		error [string.concat "No source file found for test suite: " $suite]
	}
	puts "***** SNAIL TEST GENERATION CONSOLE *****"
	puts ""
	puts [string.concat "Test Suite: " $suite]
	puts [string.concat "Path      : " $path]
	puts ""
	loop {
		set code [prompt "Enter test (blank to finish)> "]
		if {or {is.null $code} {string.is.blank $code}} then {
			puts ""
			return [null]
		}
		set code [token.unquote [string.concat "{" $code "}"]]
		if {not [token.is.list $code]} then {
			puts "ERROR: Bad syntax"
			puts ""
			continue
		}
		set generated [test.make $suite $code]
		set body [token.list.body $generated]
		puts ""
		set caught [catching $code]
		if {not.null $caught} then {
			puts "-----CAUGHT ERROR-----"
			puts $caught
		}
		puts "-----GENERATED TEST-----"
		puts $body
		puts ""
		if {prompt.yesno "Accept and save this test"} then {
			puts ""
			eval $generated
			set text [file.read $path]
			set text [string.concat $text [if {not [string.ends.with $text "\n"]} then {pass "\n"} else {pass ""}] $body "\n"]
			file.write $path $text
			puts [string.concat "SUCCESS: Wrote file " $path]
		}
		puts ""
	}
}
